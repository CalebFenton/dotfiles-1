set rtp^=$DOTFILES/vim
set rtp+=$DOTFILES/vim/bundle/vundle,$DOTFILES/vim/after

set nocompatible
filetype off

"
" Plugins.
"
call vundle#begin($DOTFILES . "/vim/bundle")

Plugin 'ecomba/vim-ruby-refactoring'
Plugin 'ervandew/supertab'
Plugin 'gmarik/vundle'
Plugin 'godlygeek/tabular'
Plugin 'kana/vim-textobj-user'
Plugin 'kchmck/vim-coffee-script'
Plugin 'kien/ctrlp.vim'
Plugin 'mattn/gist-vim'
Plugin 'mattn/webapi-vim'
Plugin 'nelstrom/vim-textobj-rubyblock'
Plugin 'rodjek/vim-puppet'
Plugin 'scrooloose/syntastic'
Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-dispatch'
Plugin 'janko-m/vim-test'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-haml'
Plugin 'tpope/vim-liquid'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-rbenv'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'vim-ruby/vim-ruby'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'yoppi/fluentd.vim'
Plugin 'jpo/vim-railscasts-theme'
Plugin 'elixir-lang/vim-elixir'

call vundle#end()

syntax on
filetype plugin indent on


set background=dark
colorscheme railscasts
hi Normal ctermbg=none ctermfg=255
hi TabLineFill term=bold cterm=bold ctermbg=0

hi diffRemoved ctermbg=52 ctermfg=15
hi diffAdded ctermbg=64 ctermfg=15
hi diffFile ctermbg=4* ctermfg=15
hi DiffAdd term=bold ctermfg=15 ctermbg=64
hi DiffChange term=bold ctermfg=15 ctermbg=236
hi DiffText term=bold cterm=bold ctermbg=160 ctermfg=255

" Run built-in matchit.
runtime macros/matchit.vim

"
" Main settings.
"
set modeline
set modelines=3

set history=1000
set spell

set hlsearch
set incsearch
set ignorecase
set smartcase

set pastetoggle=<F2> " Paste toggle.

set backspace=indent,eol,start " Backspacing FTW.

set cindent
set smartindent
set autoindent

set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set smarttab

set nowrap
set textwidth=0

set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.class

set winwidth=84
set winheight=5
set winminheight=5
set winheight=999

set formatprg=par\ -w80

set laststatus=2 " Always show status bar.

set relativenumber
if version >= 704
  set nu
end
set ruler

set novisualbell
set noerrorbells
set vb t_vb=

set list listchars=tab:▸\ ,eol:¬ " Show tabs and new line 'hidden' characters.

" Folding
set foldmethod=indent
set foldnestmax=5
set foldlevelstart=99
set nofoldenable

set tags=tags;$HOME
set switchbuf+=usetab,newtab

"
" Mappings and Commands
"

" Allow us to map Shift + <CR> in vim.
" See: http://stackoverflow.com/a/12117076
inoremap <S-CR> <Esc>
imap ✠ <S-CR>

map <C-s> <esc>:w<CR>
imap <C-s> <esc>:w<CR>

" Remove trailing whitespace with :RMTWS.
command! RMTWS :execute '%s/\s\+$//e'
map <leader>rw <esc>:RMTWS<CR>

map <silent> <Leader>qc :ccl<CR> " Closes quicklist.
map <Leader>ssc :nohls<CR> " Mapping to clear search HL.
nmap <silent> <leader>mw :call MarkWindowSwap()<CR>
nmap <silent> <leader>pw :call DoWindowSwap()<CR>
map <leader>tc :set invlist<CR> " Toggle list characters.
cmap w!! %!sudo tee > /dev/null % " Save with sudo.
map <Leader>t :TestFile<CR>
map <Leader>s :TestNearest<CR>
map <Leader>l :TestLast<CR>
map <Leader>a :TestSuite<CR>
map <Leader>m :Rmodel<CR>
map <Leader>vm :RVmodel<CR>
map <Leader>sm :RSmodel<CR>
map <Leader>c :Rcontroller<CR>
map <Leader>vc :RVcontroller<CR>
map <Leader>sc :RScontroller<CR>
map <Leader>v :Rview<CR>
map <Leader>vv :RVview<CR>
map <Leader>sv :RSview<CR>
map <Leader>w <C-w>w

map <Left> <Nop>
map <Right> <Nop>
map <Up> <Nop>
map <Down> <Nop>
imap <Left> <Nop>
imap <Right> <Nop>
imap <Up> <Nop>
imap <Down> <Nop>

" Disable Ex mode and Lookup
map Q <Nop>
map K <Nop>

" Toggle long lines highlight.
if version >= 703
  nnoremap <leader>tl
    \ :if &cc != '0'<Bar>
    \   set cc=0<Bar>
    \ else<Bar>
    \   set cc=+5<Bar>
    \ endif<CR>
endif

" Mappings to expand the current path (edit, split, vsplit)
map <leader>ew :e <C-R>=expand("%:p:h") . "/" <CR>
map <leader>es :sp <C-R>=expand("%:p:h") . "/" <CR>
map <leader>ev :vsp <C-R>=expand("%:p:h") . "/" <CR>
map <leader>et :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Resize pane mappings.
nnoremap <C-h> :vertical resize -5<cr>
nnoremap <C-j> :resize +5<cr>
nnoremap <C-k> :resize -5<cr>
nnoremap <C-l> :vertical resize +5<cr>

" Refresh ctags.
map <leader>rt :!ctags --extra=+f --exclude=.git --exclude=log -R * `bundle show --paths`<CR><CR>

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

"
" Misc options.
"
let g:netrw_bufsettings = 'noma nomod nu nobl nowrap ro' " Line numbers etc in netrw.
let g:is_posix = 1 " See: http://bit.ly/KcQg0M
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_switch_buffer = 'Et'
let g:syntastic_enable_signs=1
let g:UltiSnipsDontReverseSearchPath="1"
" See vim-test
let test#strategy = "dispatch"

set diffopt+=vertical

"
" Functions
"
function! MarkWindowSwap()
    let g:markedWinNum = winnr()
endfunction

function! DoWindowSwap()
    "Mark destination
    let curNum = winnr()
    let curBuf = bufnr( "%" )
    exe g:markedWinNum . "wincmd w"
    "Switch to source and shuffle dest->source
    let markedBuf = bufnr( "%" )
    "Hide and open so that we aren't prompted and keep history
    exe 'hide buf' curBuf
    "Switch to dest and shuffle source->dest
    exe curNum . "wincmd w"
    "Hide and open so that we aren't prompted and keep history
    exe 'hide buf' markedBuf
endfunction

"
" Autocmd stuff.
"

" For these languages use different tab spacing.
au FileType javascript setlocal ts=4 sts=4 sw=4
au FileType php setlocal ts=4 sts=4 sw=4
au FileType python setlocal ts=4 sts=4 sw=4

" Jump to last position in file.
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif

" Don't insert comment lead characters when pressing o or O.
au FileType * set formatoptions-=o

"
" Highlighting.
"

" Highlight trailing whitespace!
hi link TrailingWhiteSpace Search
au BufWinEnter * let w:twsm=matchadd('TrailingWhiteSpace', '\s\+$')

hi CursorColumn term=underline cterm=underline guibg=#333435 " hidden carriage return character.
hi NonText ctermbg=NONE ctermfg=235 guifg=#424242 gui=NONE " hidden tab character.
hi SpecialKey ctermbg=NONE ctermfg=235 guifg=#424242 gui=NONE

" Highlight long lines.
if version >= 703
  highlight ColorColumn ctermbg=233 guibg=#464646
  set cc=+1 tw=80
endif

" From this post: http://robots.thoughtbot.com/faster-grepping-in-vim
" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!

" Source local files.
let LOCALVIMRC = expand("~/.vimrc.local")
if filereadable(LOCALVIMRC)
  exe "source " . LOCALVIMRC
endif
