set rtp^=$DOTFILES/vim
set rtp+=$DOTFILES/vim/bundle/vundle,$DOTFILES/vim/after

set nocompatible

"
" General settings.
"
set history=1000
set spell
set mouse=a
set ttymouse=xterm2 " Make it work in tmux.

" Searching.
set hlsearch
set incsearch
set ignorecase
set smartcase

" Tags.
set tags=tags;$HOME

" Remember last location in file.
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

"
" Formatting settings.
"
set backspace=indent,eol,start " Backspacing FTW.
set cindent
set smartindent
set autoindent
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set smarttab

au FileType javascript setlocal ts=4 sts=4 sw=4
au FileType php setlocal ts=4 sts=4 sw=4
au FileType python setlocal ts=4 sts=4 sw=4

set nowrap
set textwidth=0

set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.class

set foldmethod=indent
set foldnestmax=5
set foldlevelstart=99
set nofoldenable

syntax on
filetype off

"
" Display settings.
"
set background=dark
if has("gui_running")
  colorscheme railscasts2
else
  colorscheme railscasts_term
endif

set laststatus=2 " Always show status bar.
set number
set ruler
set novisualbell
set noerrorbells
set vb t_vb=
set list listchars=tab:▸\ ,eol:¬ " Show tabs and new line 'hidden' characters.

" Highlight trailing whitespace!
hi link TrailingWhiteSpace Search
au BufWinEnter * let w:twsm=matchadd('TrailingWhiteSpace', '\s\+$')

hi CursorColumn term=underline cterm=underline guibg=#333435
" hidden carriage return character.
hi NonText ctermbg=NONE ctermfg=235 guifg=#424242 gui=NONE
" hidden tab character.
hi SpecialKey ctermbg=NONE ctermfg=235 guifg=#424242 gui=NONE

" Improve vimdiff colours.
hi DiffAdd term=bold ctermfg=0 ctermbg=64
hi DiffChange term=bold ctermfg=0 ctermbg=240
hi DiffText term=bold cterm=bold ctermbg=160 ctermfg=255

" Highlight long lines.
if version >= 703
  highlight ColorColumn ctermbg=233 guibg=#464646
  set cc=+1 tw=80
endif

"
" Mappings and Commands
"
" Remove trailing whitespace with :RMTWS.
command! RMTWS :execute '%s/\s\+$//e'

" Toggle long lines highlight.
if version >= 703
  nnoremap <leader>tl
    \ :if &cc != '0'<Bar>
    \   set cc=0<Bar>
    \ else<Bar>
    \   set cc=+5<Bar>
    \ endif<CR>
endif

" Toggle trailing whitespace highlight.
nnoremap <silent> <Leader>w
            \ :if exists('w:twsm') <Bar>
            \   silent! call matchdelete(w:twsm) <Bar>
            \   unlet w:twsm <Bar>
            \ else <Bar>
            \   let w:twsm = matchadd('TrailingWhiteSpace', '\s\+$') <Bar>
            \ endif<CR>

" Mapping to clear search HL.

map <leader>sc :nohls<CR>

" Mappings to expand the current path (edit, split, vsplit)
map <leader>ew :e <C-R>=expand("%:p:h") . "/" <CR>
map <leader>es :sp <C-R>=expand("%:p:h") . "/" <CR>
map <leader>ev :vsp <C-R>=expand("%:p:h") . "/" <CR>
map <leader>et :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Tab mappings.
map ,tc :tabclose<CR>
map ,tn :tabnew<CR>
map <silent> ,[ :tabprev<CR>
map <silent> ,] :tabnext<CR>

" Resize pane mappings.
nnoremap <C-h> :vertical resize -5<cr>
nnoremap <C-j> :resize +5<cr>
nnoremap <C-k> :resize -5<cr>
nnoremap <C-l> :vertical resize +5<cr>

function! MarkWindowSwap()
    let g:markedWinNum = winnr()
endfunction

function! DoWindowSwap()
    "Mark destination
    let curNum = winnr()
    let curBuf = bufnr( "%" )
    exe g:markedWinNum . "wincmd w"
    "Switch to source and shuffle dest->source
    let markedBuf = bufnr( "%" )
    "Hide and open so that we aren't prompted and keep history
    exe 'hide buf' curBuf
    "Switch to dest and shuffle source->dest
    exe curNum . "wincmd w"
    "Hide and open so that we aren't prompted and keep history
    exe 'hide buf' markedBuf
endfunction

nmap <silent> <leader>mw :call MarkWindowSwap()<CR>
nmap <silent> <leader>pw :call DoWindowSwap()<CR>

" Toggle list characters.
map <leader>tc :set invlist<CR>

" Paste toggle.
nmap <leader>p :setlocal paste! paste?<cr>

" Refresh ctags.
map <leader>rt :!ctags --extra=+f --exclude=.git --exclude=log -R * `bundle show --paths`<CR><CR>

" Save with sudo.
cmap w!! %!sudo tee > /dev/null %

"
" Misc settings.
"

" See: http://bit.ly/KcQg0M
let g:is_posix = 1

"
" Plugins.
"
call vundle#rc($DOTFILES . "/vim/bundle")

" Nerd Commenter.
Bundle "The-NERD-Commenter"

" Fugitive.
Bundle "fugitive.vim"

" Surround.
Bundle "surround.vim"

" Most recently used.
Bundle "mru.vim"

" DelimitMate
Bundle "delimitMate.vim"

" Supertab.
Bundle "ervandew/supertab"

" Tagbar.
Bundle "Tagbar"

" Ack.
Bundle "ack.vim"

" Ctrl-P.
Bundle "ctrlp.vim"
let g:ctrlp_working_path_mode = 0
let g:ctrlp_jump_to_buffer = 2

" Tabular
Bundle "Tabular"

" Syntastic
Bundle "Syntastic"
let g:syntastic_enable_signs=1

" JShint
Bundle "wookiehangover/jshint.vim"

" Puppet Syntax Highlighting.
Bundle "Puppet-Syntax-Highlighting"

" Github Gists.
Bundle "mattn/gist-vim"
Bundle "mattn/webapi-vim"

" Slim templates.
Bundle "bbommarito/vim-slim"

" Matchit.
Bundle "matchit.zip"

" Ruby.
Bundle "vim-ruby/vim-ruby"

" Rails.vim
Bundle "tpope/vim-rails"

" Vim Haml/SCSS
Bundle "tpope/vim-haml"

" Less syntax highlighting.
Bundle "groenewege/vim-less"

" Snipmate + Dependencies.
Bundle "MarcWeber/vim-addon-mw-utils"
Bundle "tomtom/tlib_vim"
Bundle "honza/snipmate-snippets"
Bundle "garbas/vim-snipmate"

" Needs to be at the end for Vundle.
filetype plugin indent on

" Source local files.
let LOCALVIMRC = expand("~/.vimrc.local")
if filereadable(LOCALVIMRC)
  exe "source " . LOCALVIMRC
endif
